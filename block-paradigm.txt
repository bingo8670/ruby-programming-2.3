代码范式：

条件判断：if~then~end
if 条件 （then）      #括号里的内容可省略
  条件成立时执行的处理
end

if 条件 （then）      #括号里的内容可省略
  条件成立时执行的处理
else
  条件不成立时执行的处理
end

if 条件1 （then）
  处理1
elsif 条件2 (then)
  处理2
elsif 条件3 (then)
  处理3
else
  处理4
end

unless 语句（条件为假时执行处理）
unless 条件 (then)
  处理
end

case 语句（需要比较的对象只有一个，简单便于理解）
case 比较对象
when 值1 （then）
  处理 1
when 值2 （then）
处理 2
when 值3 （then）
  处理 3
else
  处理4
end




循环：while语句，times方法，for 语句，
while 循环条件 （do）  #括号里的内容可省略
  希望循环的处理
end

循环次数.times do
  希望循环的处理
end

循环次数.times {
  希望循环的处理
}
#两种times方法等价

数组的循环
数组.each do |变量|
  希望循环的处理
end

for 语句
for 变量 in 开始时的数值..结束时的数值 （do）
  希望循环的处理
end

普通的for 语句
for 变量 in 对象 （do）
  希望循环的处理
end

each 方法（块的 do~end 部分可换为 {~}，跨行用 do~end ，一行用 {~} ）
对象.each do |变量|
  希望循环的处理
end

对象.each { |变量|
  希望循环的处理
}

散列的循环
散列.each do | 键变量， 值变量 |
  希望循环的处理
end



方法的定义
def 方法名
  希望执行的处理
end

创建类
class 类名
  类的定义
end

创建模块
module 模块名
  模块定义
end

异常处理的写法（begin~rescue~end）
begin
  可能会发生异常的处理
rescue
  发生异常时的处理
end

后处理
不管是否发生异常都希望执行的处理，用 ensure来定义；
begin
  有可能发生异常的处理
rescue => 变量
  发生异常后的处理
ensure
  不管是否发生异常都希望执行的处理
end

chomp！ 方法删除换行符
f.each_line do |line|
  line.chomp!
  处理 line
end
