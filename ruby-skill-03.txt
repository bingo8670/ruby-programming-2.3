第三部分 Ruby 的类
第十二章 数值类
12.1 数值类的构成
Integer   ：整数，分为Float（浮点小数）和Bignum (大数)
Rational  ：有理数，numerator （分子）和 denomination (分母)
Complex   ：复数，real （实数）和imaginary（虚数）

12.2 数值的字面量（字面量的_会被自动忽略，每3位数字间隔一下）
二进制数   ：以0b 开头的数值；
八进制数   ：以0或者0o 开头的数值；
十进制数   ：以0d 开头的数值，或单纯的数字罗列；
十六进制数 ：以0x 开头的数值；
科学计数法 ：有效数字 + e/E + 表示指数的整数

12.3 算数运算
+加  -减  *乘  /除  %取余数  **乘方，幂

除法 ：
· x.duv(y)       ：返回 x 除以 y 后的商的整数；
· x.quo(y)       : 返回 x 除以 y 后的商(可能非整数)；
· x.modulo(y)    : 返回 x 除以 y 后的余数，和 x % y 等价；
· x.divmod(y)    : 以数组形式返回（ x 除以 y 后的商和余数）；
· x.remainder(y) : 返回 x 除以 y 后的余数，正负和 x 一致；

12.4 Math 模块（P158）
提供三角函数/对数函数等常用函数，常量PI（圆周率，3.1415926）和E（自然对数，2.7182818）

12.5 数值类型的转换
to_f : 将对象转换为 Float 对象；
to_i : 将对象转换为 Integer 对象；
to_r : 将对象转换为 Rational 对象；  分数
to_c : 将对象转换为 Complex 对象；   复数
round 方法用于四舍五入；
ceil  方法用于返回比接收者大的最小整数；
round 方法用于返回比接收者小的最大整数；

12.7 随机数
Random.rand ：不指定参数，返回比1小的浮点小数；参数为正整数是，返回0到该正整数之间的整数；

12.8 计数
n.times{|i| ...}                : 循环n次，从0 到n-1 的值会被依次赋值给i;
from.upto(to){|i| ...}          : 从from 开始循环对 i 进行加1处理，直到 i 等于 to.
from.downto(to){|i| ...}        :从from 开始循环对 i 进行减1处理，直到 i 等于 to.
from.stepto(to, step){|i| ...}  :从from 开始循环对 i 进行加 step 处理，直到 i 等于 to.


第十三章 数组类
13.1 数组特征
· 可以从数组中获取某个索引的元素， print name[2]
· 可以将任意值保存到数组的某个索引的元素中， name[0] = "Tom"
· 使用迭代器可以逐个取出数组中的元素， names.each{|name| puts name}


13.2 数组的创建方法
13.2.1 使用 Array,new
Array 类的情况下：
若 new 方法没有参数，则会创建元素个数为 0 的数组；
若 new 方法只有一个参数，则会创建元素个数为该参数个数，且各元素初始值都为 nil 的数组；
若 new 方法有两个参数，则第一个参数代表元素的个数，第二个参数代表元素的初始值；

13.2.2 使用 %w 与 %i (节省书写“”和，的时间;使程序更加简洁)
%w ：创建不包含空白的字符串数组；
%i ：创建元素为符号的数组；

13.2.3 使用 to_a 方法
很多类都定义了 to_a 方法，该方法能把该类的对象转换为数组；

13.2.4 使用字符串的 split 方法
split ：用逗号或者 空白隔开的字符串


13.3 索引的使用方法
13.3.1 获取元素（三种主流方法）
a[n]      ：提取从 0 开始的第 n 个元素，重新排列后创建新数组并返回；
a[n..m]   ：提取从 a[n] 开始到第 a[m] 之间的元素，重新排列后创建新数组并返回；
a[n, len] : 提取从 a[n] 开始的 len 个元素，重新排列后创建新数组并返回；

13.3.2 替换元素
a[n] = item             # 替换一个元素
a[n..m] = [n, ... m]    # 替换多个元素

13.3.3 插入元素
a[n, 0] ：在索引值为 n 的元素前插入新元素；

13.3.4 通过多个索引创建数组
a.values_at(n1, n2, ···)  ：提取元素 n1, n2 ···后重新创建数组并返回；


13.4 作为集合的数组
13.4.1 集合的运算
ary = ary 1 & ary2   :取出同时属于两个集合的元素，并创建新的集合（交集）
ary = ary 1 | ary2   :取出两个集合中的所有元素，并创建新的集合（并集，自动去重）
ary = ary 1 + ary2   :取出两个集合中的所有元素，并创建新的集合（并集，不去重）
ary = ary 1 - ary2   :取出 ary1 中不属于 ary2 的元素，并创建新的集合（补集）


13.5 作为列的数组
队列（queue）：按元素被追加时的顺序来获取元素的数据结构，FIFO（First-in First-out，先进先出），类似于排队；
栈（stack）  ：按元素被追加时的相反顺序来获取元素的数据结构，LIFO（Last-in First-out，先进后出），类似于取摞盘子；

           对数组开头的元素的操作      对数组末尾的元素的操作
追加元素        unshift                  push
删除元素        shift                    pop
引用元素        first                    last
push 和 shift 方法可以实现队列；
push 和 pop   方法可以实现栈；

13.6 数组的主要方法
13.6.1 为数组添加元素
a.unshift(item)            : 将item 元素添加到数组的开头；
a << item 或者 a.push(item) : 将item 元素添加到数组的末尾；
a.contact(b) 或者 a + b     : 连接数组 a 和 b, a/b并集；
a[n] = item      ：将数组 a 指定的部分的元素替换为 item.
a[n..m] = item   ：将数组 a 指定的部分的元素替换为 item.
a[n, len] = item : 将数组 a 指定的部分的元素替换为 item.

13.6.2 从数组中删除元素
a.compact      # 从数组 a 中删除 nil 元素；
a.compact!     # 返回删除nil 元素后的数组 a，没删除返回 nil.
a.delete(x)    # 从数组 a 中删除 x 元素；
a.delete_at(n) # 从数组 a 中删除 a[n]元素；

a.delete_if{|item|···}      # 如果块的执行结果为真，
a.reject{|item|···}         # 则删除item
a.reject!{|item|···}        # 破坏性

a.slice!(n)                 # 删除数组 a 中指定的部分，
a.slice!(n..m)              # 并返回剩余部分的值。
a.slice!(n, len)            # 破坏性

a.uniq                      # 删除数组 a 中的重复元素；
a.uniq!                     # 破坏性

a.shift       # 删除数组 a 的开头元素，并返回删除的值；
a.pop         # 删除数组 a 中末尾元素，并返回删除的值；


13.6.3 替换数组元素
a,collect{|item|···}        # 将数组a的各元素item传给块，
a,collect!{|item|···}       # 并用块处理过的结果创建新的数组
a.map{|item|···}
a.map！{|item|···}

a.fill(value)
# 将数组a的元素替换为value；一个参数时，所有元素值都变为value；
a.fill(value, begin)
# 两个参数时，从begin到末尾的元素变为value；
a.fill(value, begin, len)
# 三个参数时，从begin开始的len个元素都变为value；
a.fill(value, n..m)
#当第二个参数指定为[n..m]时，则指定范围内的元素值都变为value；


a.flatten      # 展开嵌套数组，使嵌套数组变成一个大数组；
a.flatten!

a.reverse      # 反转数组a 的元素顺序
a.reverse!

a.sort                # 对数组a 排序，方法可由块指定；
a.sort!               # 没块时使用 <=> 进行比较；
a.sort{|i,j|···}
a.sort！{|i,j|···}

a.sort_by(|i|···)     # 对数组a 排序，根据块运行结果对数组的所有元素进行排序；



13.8 处理数组中的元素

13.9 数组第元素

13.10 同时访问多个数组



第十四章 字符串类
14.1 字符串的创建
%Q 相当于用 "" 创建字符串；
%q 相当于用 '' 创建字符串；

14.2 获取字符串的长度
length/size 方法用于获取字符串的长度
bytesize 方法用于获取字节数
empty？ 方法用于查看字符串长度是否为 0 ；

14.3 字符串的索引（用法和数组的类似）

14.4 字符串的连接
将两个字符串合并为新的字符串：str = a + b
扩展原有的字符串： a << b,   a.concat(b)

14.5 字符串的比较
用 == 或者 != 来判断字符串是否相同，但意思相反；
用 正则表达式 来判断是否为相似的字符串；

字符串也有大小关系，但字符串的大小关系不是由字符串蛋长度决定的，是由字符编码但顺序决定的；

string.ord 方法可获取字符的码位；


14.6 字符串的分割（split 方法）
split 方法 ：用字符串中的特定字符l莱分割时使用； string.split(/:/)

14.7 换行符的使用方法
                 删除最后一个字符       删除换行符
非破坏性的            chop               chomp
破坏性的              chop!              chomp!

chomp！ 方法删除换行符
f.each_line do |line|
  line.chomp!
  处理 line
end

14.7 字符串的检索与替换
检索方法：
index   :从右到左检查字符串是否存在参数指定的字符串，返回字符串首个字符的索引值；
rindex  :从左到右检查字符串是否存在参数指定的字符串，返回字符串首个字符的索引值（最后一次出现的索引值）；
include ：字符串中是否存在参数指定的字符串，返回true或false；

替换方法：sub,gsub


14.9 字符串与数组的共通方法
14.9.1 与索引操作相关的方法
s[n]      = str
s[n..m]   = str
s[n, len] = str

s.slice(n)
s.slice(n..m)
s.slice(n, len)

s.slice!(n)       # 删除字符串s 的一部分，并返回删除的部分；
s.slice!(n..m)
s.slice!(n, len)

14.9.2 返回 Enumerator 对象的方法
each_line ：以 行 为单位进行循环处理
each_byte ：以字节为单位进行循环处理
each_char ：以字符为单位进行循环处理

14.9.3 与连接（concat）、反转（reverse）相关的方法
s.concat(s2)        # 连接
s+s2

s.delete(str)       # 从字符串 s 中删除字符串str
s.delete!(str)

s.reverse           # 反转字符串 s
s.reverse!

14.10 其他方法
s.strip             # 删除字符串 s 开头和末尾的空白字符；
s.strip!

s.upcase            # 字符串 s 内容全部大写
s.upcase!

s.downcase          # 字符串 s 内容全部小写
s.downcase!

s.swapcase          # 字符串 s 内容大小写互换
s.swapcase!

s.capitalize        # 字符串 s 仅首字母大写
s.capitalize!

s.tr("B", "b")      # 替换字符
s.tr!
