第一部分 Ruby 初体验
第一章 Ruby 初探
1.8.3  使用数学相关的函数时,必须在函数前加上“Math.”。
Math.sin(3.14)  正弦，Math.sqrt(100)  开方

1.10  注释
单行注释：#放在要注释的行前
多行注释：用=begin和=end包起来

1.12  条件判断：if~then~end
if 条件 （then）      #括号里的内容可省略
  条件成立时执行的处理
end

if 条件 （then）      #括号里的内容可省略
  条件成立时执行的处理
else
  条件不成立时执行的处理
end

1.13   循环：while语句，times方法
while 循环条件 （do）  #括号里的内容可省略
  希望循环的处理
end

循环次数.times do
  希望循环的处理
end


第二章：便利的对象
2.1 数组
[]数组的索引编号从0开始
[].size可返回数组的大小

2.1.7  数组的循环
数组.each do |变量|
  希望循环的处理
end

2.2.1  什么是符号
在标识符的开头加上“：”就是符号了，例如 sym = :foo
符号和字符串互换：对符号使用to_s方法，可得到对应的字符串；对字符串使用to_sym方法，可得到对应的符号；

2.2.2  散列的创建
{key:value}，通常使用符号/字符串/数值作为散列的键

符号当键使用是，ruby的专用简写，下面两个意思相同：
person1 = { :name => "后藤", :pinyin => "houteng" }
person2 = { name: "后藤", pinyin: "houteng" }

2.2.3 散列的使用
从散列中取出对象： 散列名 [键]
保存对象： 散列名 [键] = 希望保存的对象

2.2.4 散列的循环
散列.each do | 键变量， 值变量 |
  希望循环的处理
end

2.4 正则表达式 regular expression
作用：将字符串与模式（patterm）相匹配；使用模式分割字符串；
匹配正则表达式与字符串的方法： /模式/ =~ 希望匹配的字符串，得到匹配的字符串所在的位置序号，也是从0开始。
正则表达式中，^表示匹配字符串的开始，$表示匹配字符串的结束。

第三章 创建命令
3.1 命令行的输入数据
Ruby程序中，使用ARGV这个Ruby预定义好的数组来获取从命令行传递过来的数据。数组ARGV中的元素就是在命令行中指定的脚本字符串参数。

3.2 文件的读取
3.2.1 从文件中读取内软并输出
（1）打开文件；
（2）读取文件的文本数据；
（3）输出文件的文本数据；
（4）关闭文件

3.2.2 从文件中逐行读取内容并输出
（3.2.1）的程序有如下问题：
· 一下子读取全部文件内容会很耗时；
· 读取的文件内容会暂时保存在内存中，遇到大文件时，程序有可能因此而崩溃；
改为逐行读取并输出就可以了。

3.2.3 从文件中读取指定模式的内容并输出
grep命令利用正则表达式搜索文本数据，输出按照指定模式匹配到的行。

3.3 方法的定义
def 方法名
  希望执行的处理
end

3.4 其他文件的引用
大部分编程语言都提供了把多个程序组合为一个程序的功能。像这样，被其他程序引用的程序，我们成为库（library）。一般使用 require 方法或者 require_relative 来引用库（可省略后缀.rb）。
require 希望使用的库名
require_relative 希望使用的库名



第二部分 Ruby 的基础
第四章 对象、变量和常量
4.1 对象
在Ruby中，表现数据的基本单位成为对象（object）。

4.2 类
Ruby的类（class）表示的就是对象的种类。

4.3 变量
变量就像是对象的名片。
Ruby中有四种类型的变量：（命名方式决定变量种类）
局部变量（local variable）      ：以英文小写字母或者_开头
全局变量（global variable）     ：以 $ 开头
实例变量（instance variable）   ：以 @ 开头
类变量（class variable）        ：以 @@ 开头

4.4 常量（constant），以大写英文字母开头

4.5 保留字（不可作为变量名）

4.6 多重赋值
4.6.1 合并执行多个赋值操作
4.6.2 交换变量的值
4.6.3 获取数组的元素


第五章 条件判断
5.1 什么是条件判断
if 语句；
unless 语句；
case 语句；

5.2 Ruby中的条件
返回真价值的方法都要以 ？ 结尾。

5.3 逻辑运算符（nil或者false为假，其余为真）
条件1 && 条件2 ：和，一假即假，两真为真；
条件1 || 条件2 ：或，一真即真，两假为假；
！条件        ：非

5.4 if 语句
if 条件1 （then）
  处理1
elsif 条件2 (then)
  处理2
elsif 条件3 (then)
  处理3
else
  处理4
end

5.5 unless 语句（条件为假时执行处理）
unless 条件 (then)
  处理
end

5.6 case 语句（需要比较的对象只有一个，简单便于理解）
case 比较对象
when 值1 （then）
  处理 1
when 值2 （then）
处理 2
when 值3 （then）
  处理 3
else
  处理4
end

5.7 if 修饰符与 unless 修饰符（写在希望执行的代码后面）
puts "a 比 b 大" if a > b

总结：if 与 unless 可互换，使用的条件相反；

第六章 循环
6.3 实现循环的方法
· 使用循环语句
· 使用方法实现循环

6.4 times 方法（单纯执行一定次数的处理）
循环次数.times do
  希望循环的处理
end

循环次数.times {
  希望循环的处理
}
#两种times方法等价

6.5 for 语句
for 变量 in 开始时的数值..结束时的数值 （do）
  希望循环的处理
end

6.6 普通的for 语句
for 变量 in 对象 （do）
  希望循环的处理
end

6.7 while 语句（只要条件成立，就会不断地重复循环处理）
while 条件 (do)
  希望循环的处理
end

6.8 until 语句（一直执行循环处理，直到条件成立为止）
until 条件 （do）
  希望循环的处理
end

6.9 each 方法（块的 do~end 部分可换为 {~}，跨行用 do~end ，一行用 {~} ）
对象.each do |变量|
  希望循环的处理
end

对象.each { |变量|
  希望循环的处理
}

6.10 loop 方法（不断执行循环处理，需要 break 方法，使程序跳出循环）

6.11 循环控制
三种循环控制命令：
break ：终止程序，跳出循环；
next  ：跳到下一个循环；
redo  ：在相同条件下重复刚才的处理； （很少用）

总结：循环语句、方法及其主要用途
times方法 ：确定了循环次数时使用
for 语句  ：从对象中取出元素时使用
while语句 ：希望自由指定循环条件时使用
until语句 ：使用 while 语句使循环条件变得n难懂时使用
each 方法 ：从对象中取出元素时使用
loop 方法 ：不限制循环次数时使用
