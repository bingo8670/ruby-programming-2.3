Vim/三种模式
Vim和Vi一样具有三种模式：命令模式（Command mode），插入模式（Insert mode）和底线命令模式（Last line mode）。
当用户处于不同模式的时候，敲击键盘会产生不同的作用。
命令模式
用户刚刚启动Vim，便进入了命令模式。
此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i 被当作了一个命令。
以下是常用的几个命令：
* i 切换到插入模式，以输入字符。
* x 删除当前光标所在处的字符。
* : 切换到底线命令模式，以在最底一行输入命令。
* h 光标左移
* j 光标下移
* k 光标上移
* l 光标右移
* w: 下一个词。 (word)
* b: 上一个词。 (backword)
* ctrl + f 向下翻页（front）
* ctrl + b 向上翻页（back）
* ctrl + d 向下翻页（down）
* ctrl + u 向上翻页（up）
* dd  删除光标所在行
* o  在光标所在行的下方插入一行并切换到输入模式
* yy  复制光标所在行
* p    在光标所在行的下方粘贴
* P    在光标所在行的上方粘贴
* shift + v， 选择多行，然后上下移动。
*



若想要编辑文本：启动Vim，进入了命令模式，按下 i ，切换到输入模式。
命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。
Vim abc ：会打开abc文件，如果没有该文件，则新建并打开；
cat abc  : 会查看abc文件的内容，并打印到屏幕；
Vim +(n) abc ：会打开abc文件，并把光标定位到第n行；不指定n则定位到第一行；
vim +/xxx  abc :会打开abc文件，并把光标定位到第一个出现xxx字符的地方；按字母n/N 可以切换到其余出现xxx 的地方；
vim aa bb cc :	会创建aa/bb/cc 三个文件，并打开第一个文件aa；输入 :n 可以切换到下一个文件；输入 :N 或 :prev 可以切换到上一个文件；


输入模式
在命令模式下按下 i 就进入了输入模式。
在输入模式中，可以使用以下按键：
* 字符按键以及Shift组合，输入字符
* ENTER，回车键，换行
* BACK SPACE，退格键，删除光标前一个字符
* DEL，删除键，删除光标后一个字符
* 方向键，在文本中移动光标
* HOME/END，移动光标到行首/行尾
* Page Up/Page Down，上/下翻页
* Insert，切换光标为输入/替换模式，光标将变成竖线/下划线
* ESC，退出输入模式，切换到命令模式

底线命令模式
在命令模式下按下:（英文冒号）就进入了底线命令模式。
底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。
在底线命令模式中，基本的命令有（已经省略了冒号）：
* q 不保存,直接退出
* ! 强制执行
* q! 不保存，并强制退出
* e! 放弃所有修改，从上次保存文件开始再编辑
* w 保存文件,但不退出
* w! 强制保存，不退出
* wq或x 保存，并退出
* wq! 强制保存，并退出
* n 切换到下一个文件
* N 切换到上一个文件
* 15或其他数字，把光标快速定位到15行；
* /xxx    从光标位置向后搜索xxx字符串并定位；
* ?xxx    从光标位置向前搜索xxx字符串并定位；
*
按ESC键可随时退出底线命令模式。






Vim有三种模式：

导航(navigation)模式。 这时候，字母就是上下左右键。
输入模式。这时候，你按字母键，才会输入字母。
命令模式。需要先输入":" 冒号，才会进入。例如，你输入 :ls , 就相当于运行了 ls 命令。
三个模式的切换
默认的就是导航模式。 你在其他模式下，按"ESC"就回到了导航模式。

在导航模式下，输入 a, i, o等，就可以进入到输入模式。

在导航模式下，输入 : 就可以进入到命令模式。

所以，在用Vim的时候，大家用ESC 会用的非常多。

（顺带提一句，用Vim的时候， 盲打是基础，所以，j,f, 左右ctrl, 都是你长在手上的眼睛。 务必熟悉它们的位置。)

上下左右
h 左
j 下
k 上
l 右
用这四个键的原因是： 所有人的右手食指都应该放在 j 上。 j 和 f 是最容易摸到的两个键了。所以，jhkl 就理所当然的成为 上下左右了。


下一个词，上一个词
w: 下一个词。 (word)
b: 上一个词。 (backword)
所以，大家要记住，按一下w 相当于按多下l.


向下一屏，向上一屏。
ctrl + f: 向下一屏（f = forward)
ctrl + b: 向上一屏（b = backward)


选择多行
shift + v， 然后上下移动。


(你也可以 直接 v然后上下左右移动， 这也是选择多行，只是不是整行整行的选择。动手试一下吧！)

搜索
搜索 some_thing: /some_thing
继续搜索下一个： n
搜索前一个： shift + n， N



在当前整个文件中，替换(也叫全局替换）
:%s/原来的字符串/新字符串/



（如果某个字符串在某一行出现了多次，希望对它所有出现的次数都替换的话，就在末尾加个g ，像这样： :%s/原来的字符串/新字符串/g )

局部替换
先 shift + v 选中若干行
:s/原来的/新的字符串


代码补全
ctrl + n : 下一个候选
ctrl + p : 上一个候选



各种快捷导航功能
Vim 的精髓，在于不用鼠标，把很多鼠标的操作交给了键盘。 所以，一旦大家掌握了下面的操作，别人看你的屏幕时就会觉得眼花缭乱。

快速打开文件
使用的插件： fuzzy find

ctrl + t, 就会弹出 >file> 这样的标志，然后输入：**/文件名 即可。 文件名是模糊查询。

我输入 ab, vim 也会把 aub 的结果列出来。



快速打开历史文件
使用的插件： MRU （most recently used files)

ctrl + e 即可。 （这个快捷键是我自己配的）



跳到行首， 行末
跳到当前行的末尾： shift + 4 (意为 $ , 这是正则表达式中 末尾的意思）
跳到当前行的行首： 0


快速跳到文件首行 ， 尾行。
“跳到尾行” 这个功能很多时候很有用。例如， vim 进入到文件夹后，最新的文件（特别是以日期命名的文件）往往排在最下面。shift + g 然后按回车可以直接打开。 想象不到吧～

gg: 第一行
shift + g: 末行。



快速跳到 上一次 / 下一次编辑的地方：
跳到 上一次编辑的地方： g;
跳到 下一次编辑的地方： g,


返回上一次/下一次编辑的文件或位置
快速返回上一次编辑的文件： ctrl + o ( o 意为 outer )
快速返回下一次编辑的文件： ctrl + i ( i 意为 inner )


输入模式
输入文本
从导航模式到编辑模式，有下面几种方法:

在光标前输入： i ( insert )
在光标后输入： a (append / after )
在行首增加内容： shift + i
在行末增加内容： shift + a
在光标下行增加内容： o
在光标上行增加内容： shift + o （这个操作往往会有500毫秒的延迟）


删除
以下删除都以当前光标作为起始位置。

删掉一个字母：x
删掉一个单词： dw
删掉一行： dd
删掉多行： shift +v, 然后 x 或者 d


复制与粘贴
复制，或者删除（vim认为删除就是剪切，所有被删掉的内容，都会被放到复制缓冲区中）后，就可以粘贴了。

复制一个单词： yw
复制当前行： yy
粘贴: p



Vim 自身的功能虽然有限，但是还是有很多插件可以供使用的. 下面的几个插件非常好用(Fuzzy finder, rails ... , 具体见 .vimrc文件)

针对多个文件进行 查找和替换
使用插件： Greplace

Gsearch -F '要替换的字符串' . -R --include=*rb
这里的 -F, -R --include=*rb 这些参数，跟grep中的一样。
在返回的结果中，把该替换的替换。
Greplace 然后选择 y/a/n 来决定是否替换。
最后， 输入 wa 保存所有文件的改动。


自动补全
凡是在 Vim 缓冲区中（近期打开过的文件）的代码，都可以补全。

从上到下选择候选词： ctrl + n
从下到上选择候选词： ctrl + p


多重复制与粘贴
现在在 Windows， Mac 和 Linux下的复制操作，都不支持多种复制。 很奇怪。

Vim中支持。 使用YRShow 插件。

在我的个人配置中， , + a 即可。原始命令： :YRShow 。 在弹出的“复制历史列表”中， 上下移动， 找到合适的后直接按回车即可。



设置背景 是亮还是暗
切换背景色（很多默认的linux 其实vim很难看的)

:set background=dark 深色背景色
:set background=light 亮色北京色


代码配色
每个人心中的代码配色都不同。 你的呢？

:colorscheme <主题名> 主题名包括： desert, deepblue, vividchalk 等等。 （不少需要到网上下载）



分割屏幕
让一个27寸显示器显示多个窗口是很酷的事儿（虽然我个人很少用）

竖屏分割： vs (vertical split缩写)
横屏分割： sp (split缩写)
来回跳换： ctrl + w + w （跳到下一个小窗口）, 或者 ctrl + w + <j/k/h/l> （跳到某个方向的小窗口）


注释多行
这里使用了插件： nerd-commentor. 我为它配置了自己的快捷键。

选中多行 (shift + v)
,cb (逗号 c b 三个键要快速按）

取消注释： 使用传统的替换即可。



为多行代码格式化
多行选中后， 按 = 即可。 （注意：不是100%好用。 因为有的代码本身就是不完整的）


快速跳到当前光标所属文件（如果可能的话）
在 Rails的 路由或者 视图文件中，很好用。gf 即可。 （gf = go to file)

在 View 中， 快速跳到一个 partial.
在 config/routes.rb 中跳到controller， 如下图所示。


Rails插件
Rails插件允许我们快速的在各种文件中跳来跳去（相信Vim 也有 Django, Spring， angular, 这样的插件， 有兴趣的朋友可以看看。）

跳转到 controller: ctrl + c
跳转到 model : ctrl + m
跳转到 view : 先移动到对应的action, 再 ctrl + v


显示/隐藏行数
:set number 显示行数
:set nonumber 取消行数


折叠/取消折叠过长的行
:set wrap 折叠
:set nowrap 取消折叠


粘贴模式
Vim 正常模式下的粘贴，会导致粘贴的代码一行接一行的缩进。 如果要取消这种缩进的话，就要进入到 "粘贴模式". （记得在这个模式下，无法使用 ctrl + t 命令来快速打开文件。 ）

:set paste 进入到粘贴模式
:set nopaste 取消粘贴模式


代码左移/右移 与 重复上一次操作。
在我们格式化代码时会用到。 极度好用。

记住：你写的任何代码都要人肉加上良好的格式化。 能为你个人减少大量错误。

左移: 选多行后， < （ shift + , ）
右移: 选多行后， > （ shift + . ）
重复上次操作: .

参考网址：http://www.imooc.com/article/13269
